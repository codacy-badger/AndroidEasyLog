/*
 * Gradle Bintray Plugin
 * https://github.com/bintray/gradle-bintray-plugin
 * */
apply plugin: 'com.jfrog.bintray'

// Read setup
Properties properties = new Properties()
properties.load(project.rootProject.file('bintray.properties').newDataInputStream())

version = properties.getProperty("lib.version")

if (project.hasProperty("android")) { // Android libraries
    task sourcesJar(type: Jar) {
        classifier = 'sources'
        from android.sourceSets.main.java.srcDirs
    }

    task javadoc(type: Javadoc) {
        source = android.sourceSets.main.java.srcDirs
        classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    }

    /*
    * Fix build error on generating Javadoc
    * See, http://stackoverflow.com/questions/34571371/android-studio-javadoc-cannot-find-symbol
    * */
    afterEvaluate {
        javadoc.classpath += files(android.libraryVariants.collect { variant ->
            variant.javaCompile.classpath.files
        })
    }
} else { // Java libraries
    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }
}
task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.getDestinationDir()
}

artifacts {
    archives javadocJar
    archives sourcesJar
}


bintray {
    user = properties.getProperty("bintray.user")
    key = properties.getProperty("bintray.apikey")

    configurations = ['archives']
    publish = true
    // [Default: false] Whether to run this as dry-run, without deploying
    dryRun = false
    pkg {
        repo = properties.getProperty("bintray.repo")
        name = properties.getProperty("bintray.name")
        desc = properties.getProperty("lib.description")
        websiteUrl = properties.getProperty("lib.siteUrl")
        issueTrackerUrl = properties.getProperty("lib.issueTracker")
        vcsUrl = properties.getProperty("lib.vcs")
        licenses = properties.get("license.all")
        publicDownloadNumbers = true

        // Optional Github repository
        githubRepo = properties.getProperty("github.repo")

        version {
            name = properties.getProperty("lib.version")
            desc = properties.getProperty("lib.versionDescription")
            released  = new Date()
            vcsTag = properties.getProperty("lib.version")
            gpg {
                // Determines whether to GPG sign the files. The default is false
                sign = true
                // The passphrase for GPG signing'
                passphrase = properties.getProperty("bintray.gpg.password")
            }
        }
    }
}
